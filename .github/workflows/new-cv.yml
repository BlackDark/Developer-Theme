name: New CV

on:
  push:
    branches:
      - alma-cv

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  PUBLISH_BRANCH: alma-cv-pages

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm

      - run: npm install --frozen-lockfile

      - run: npm run build

      - name: Backup build folder
        run: cp -r ./public /tmp/build-backup

      # # Step 5: Switch to "publish" branch
      # - name: Switch to publish branch
      #   run: |
      #     git fetch origin ${{ env.PUBLISH_BRANCH }}
      #     git checkout ${{ env.PUBLISH_BRANCH }} || git checkout --orphan ${{ env.PUBLISH_BRANCH }}

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          # required
          app-id: ${{ secrets.PUSHER_APP_ID }}
          private-key: ${{ secrets.PUSHER_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          ref: ${{ env.PUBLISH_BRANCH }}
          # Make sure the value of GITHUB_TOKEN will not be persisted in repo's config
          #persist-credentials: false

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'

      # Step 6: Remove all files in the repository (except .git)
      - name: Clean repository
        run: |
          git rm -rf . || true
          rm -rf *

      # Step 7: Copy content from backup to the repository
      - name: Restore build folder from backup
        run: cp -r /tmp/build-backup/* .

      # Step 8: Commit and push changes to "publish" branch
      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Deploy build"
          git push origin ${{ env.PUBLISH_BRANCH }} --force
